#!/bin/bash

update_package () {
    if [[ $3 == "project.clj" ]]; then
        clojure -Sdeps '{:deps {com.github.liquidz/antq {:mvn/version "RELEASE"}}}' -M -m antq.core --upgrade --force --directory "$1" --focus="$2" --skip=clojure-cli
    else
        clojure -Sdeps '{:deps {com.github.liquidz/antq {:mvn/version "RELEASE"}}}' -M -m antq.core --upgrade --force --directory "$1" --focus="$2" --skip=leiningen
    fi
    git checkout -b "dependabot/clojure${1/$GITHUB_WORKSPACE}/$4-$5-$3-$6"
    git add "$3"
    git commit -m "Bump $2"
    git push --set-upstream origin "dependabot/clojure${1/$GITHUB_WORKSPACE}/$4-$5-$3-$6"
    echo "Bump $2 $7 to $5"
    if [[ $8 != "null" ]]; then
        gh pr create -B "$INPUT_MAIN_BRANCH" --title "Bump $2 $7 to $5" -b "Bumps **$2** from $7 to $5.</br>*Changelog:* $8.$9</br></br>---</br></br>Pull request generated by Github Action \"Dependabot for Clojure projects\". Auto-rebase is currently not supported, so it is recommended to rebase before merging to prevent conflicts." -l "$INPUT_LABELS" -r "$INPUT_REVIEWERS"
    else
        gh pr create -B "$INPUT_MAIN_BRANCH" --title "Bump $2 $7 to $5" -b "Bumps **$2** from $7 to $5.$9</br></br>---</br></br>Pull request generated by Github Action \"Dependabot for Clojure projects\". Auto-rebase is currently not supported, so it is recommended to rebase before merging to prevent conflicts." -l "$INPUT_LABELS" -r "$INPUT_REVIEWERS"
    fi
    git checkout "$INPUT_MAIN_BRANCH"
}

# https://gist.github.com/jonlabelle/6691d740f404b9736116c22195a8d706
version_ge() { 
    test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1"; 
}

high_critical_check_security_fix () {
    newDependencies=()
    tempGhAlerts=("$@")
    cd "$2" || exit
    for alertGh in "${tempGhAlerts[@]:2}"
    do
        IFS='|' read -r -a array_alertGh <<< "$alertGh"
        if [[ "${array_alertGh[4]}" == "$1" ]]; then
            afterUpdateVersion=$(mvn dependency:tree -DoutputType=dot -Dincludes="${array_alertGh[0]}" | grep -e "->" | cut -d ">" -f 2 | cut -d '"' -f 2 | grep -e "${array_alertGh[0]}" | cut -d ":" -f 4)
            if version_ge "$afterUpdateVersion" "${array_alertGh[3]}"; then
                if [[ ! "${newDependencies[*]}" == *"${array_alertGh[0]}|$afterUpdateVersion|"* ]]; then
                    newDependencies+=("${array_alertGh[0]}|$afterUpdateVersion|")
                fi
            fi
            if [ -z "$afterUpdateVersion" ]; then
                if [[ ! "${newDependencies[*]}" == *"${array_alertGh[0]}|removed|"* ]]; then
                    newDependencies+=("${array_alertGh[0]}|removed|")
                fi
            fi
        fi
    done
}

vulnerability_fix_pr () {
    tempNewDependencies=("$@")
    if [ ${#tempNewDependencies[@]} -eq 0 ]; then
        securityUpdatesPrBody=""
    else
        securityUpdatesPrBody="</br></br>**Security updates**"
        for newDep in "${tempNewDependencies[@]}"
        do
            IFS='|' read -r -a array_newDep <<< "$newDep"
            if [[ "${array_newDep[1]}" == "removed" ]]; then
                securityUpdatesPrBody+="</br>Removed dependency ${array_newDep[0]}"
            else
                securityUpdatesPrBody+="</br>Updated dependency ${array_newDep[0]} to version ${array_newDep[1]}"
            fi
        done
    fi
}

# $1 - "project.clj" or "deps.edn"
if [[ -n $INPUT_DIRECTORY ]]; then
    cd "$GITHUB_WORKSPACE$INPUT_DIRECTORY" || exit
fi
mapfile -t array < <(find . -name "$1")
if [[ $1 == "project.clj" ]]; then
    echo "## Outdated Dependencies" >> "$GITHUB_STEP_SUMMARY"
fi
for i in "${array[@]}"
do
    summaryOutput=0
    counterDuplicate=""
    i=${i/.}
    cljdir=$GITHUB_WORKSPACE$INPUT_DIRECTORY${i//\/$1}
    cd "$cljdir" || exit
    clojure -Sdeps '{:deps {com.github.liquidz/antq {:mvn/version "RELEASE"}}}' -M -m antq.core --reporter="json" > /tmp/antq-report.json || true
    length=$(jq '. | length' /tmp/antq-report.json)
    length=$((length-1))
    githubAlerts=()
    vul_page=$(gh api -H "Accept: application/vnd.github+json" "/repos/$GITHUB_REPOSITORY/dependabot/alerts" --paginate)
    if  [[ $1 == "project.clj" ]]; then
        pomManifestPath="$cljdir/projectclj" || exit
    else
        pomManifestPath="$cljdir/depsedn" || exit
    fi
    mapfile -t tempGithubAlerts < <(jq -r --arg MANIFEST "${pomManifestPath:1}/pom.xml" '.[] | select(.dependency.manifest_path == $MANIFEST and .state == "open") | .security_vulnerability.package.name + "|" + .security_vulnerability.severity + "|" + .security_advisory.ghsa_id + "|" + .security_vulnerability.first_patched_version.identifier + "|"' <<< "${vul_page}")
    for vulPackage in "${tempGithubAlerts[@]}"
    do
        IFS='|' read -r -a array_vulnPackage <<< "$vulPackage"
        if [[ $INPUT_SEVERITY == "low" ]]; then
            severityLevel="low|medium|high|critical"
        elif [[ $INPUT_SEVERITY == "medium" ]]; then
            severityLevel="medium|high|critical"
        elif [[ $INPUT_SEVERITY == "high" ]]; then
            severityLevel="high|critical"
        elif [[ $INPUT_SEVERITY == "critical" ]]; then
            severityLevel="critical"
        else
            severityLevel="medium|high|critical"
        fi
        if [[ "$severityLevel" == *"${array_vulnPackage[1]}"* ]]; then
            cd "$pomManifestPath" || exit
            dep_level=$(mvn dependency:tree -DoutputType=dot -Dincludes="${array_vulnPackage[0]}" | grep -e "->" | cut -d ">" -f 2 | cut -d '"' -f 2 | cut -d ":" -f 1-2)
            IFS=' ' read -r -a dependency_level <<< "$dep_level"
            vulPackage+="${dependency_level[0]}|"
            githubAlerts+=("$vulPackage")
        fi
    done
    cd "$cljdir" || exit
    # required for high_critical_check_security_fix() to not duplicate operations
    clojure -Sdeps '{:deps {com.github.liquidz/antq {:mvn/version "RELEASE"}}}' -M -m antq.core --upgrade --force --skip=clojure-cli --skip=leiningen --directory="$pomManifestPath"
    for j in $(seq 0 $length);
    do
        fileType=$(jq -r ".[$j] .file" /tmp/antq-report.json)
        if  [[ $fileType == "$1" ]]; then
            name=$(jq -r ".[$j] .name" /tmp/antq-report.json)
            version=$(jq -r ".[$j] .version" /tmp/antq-report.json)
            latestVersion=$(jq -r ".[$j] .\"latest-version\"" /tmp/antq-report.json)
            changesUrl=$(jq -r ".[$j] .\"changes-url\"" /tmp/antq-report.json)
            time=$(date +%s)
            escapedName=$(echo "$name" | tr "/" "-")
            namePom=$(echo "$name" | tr "/" ":")
            high_critical_check_security_fix "$namePom" "$pomManifestPath" "${githubAlerts[@]}"
            cd "$cljdir" || exit
            if [ ${#newDependencies[@]} -eq 0 ]; then
                securityUpdate=""
            else
                securityUpdate="⬆️"
            fi
            prefix="dependabot/clojure${cljdir/$GITHUB_WORKSPACE}/$escapedName-$latestVersion-$1-"
            if [[ "$summaryOutput" -eq 0 ]]; then
                {
                    echo "### $INPUT_DIRECTORY$i"
                    echo "<details>"
                    echo ""
                    echo "| Dependency | From | To | Changelog | Security |"
                    echo "| --- | --- | --- | --- | --- |"
                } >> "$GITHUB_STEP_SUMMARY"
                summaryOutput=1
            fi
            if [[ $counterDuplicate != *"| $name | $version | $latestVersion | [🔗 Changelog]($changesUrl) | $securityUpdate |"* ]]; then
                if [[ $changesUrl == "null" ]]; then
                    echo "| $name | $version | $latestVersion |  | $securityUpdate |" >> "$GITHUB_STEP_SUMMARY"
                else
                    echo "| $name | $version | $latestVersion | [🔗 Changelog]($changesUrl) | $securityUpdate |" >> "$GITHUB_STEP_SUMMARY"
                fi
                counterDuplicate+="| $name | $version | $latestVersion | [🔗 Changelog]($changesUrl) | $securityUpdate |"
            fi
            if [[ $INPUT_AUTO_PULL_REQUEST == true ]]; then
                vulnerability_fix_pr "${newDependencies[@]}"
                if [[ $INPUT_SECURITY_UPDATES_ONLY == true ]]; then
                    if [ -n "$securityUpdate" ]; then
                        git fetch
                        mapfile -t branches < <(git branch -r | grep "$prefix")
                        if [[ ${branches[*]} ]]; then
                            prTime=()
                            for k in "${branches[@]}"
                            do
                                prTime+=("${k//origin\/$prefix/}")
                            done
                            IFS=" " read -r -a lastBranch <<< "$(echo "${prTime[*]}" | xargs -n1 | sort -nr | xargs)"
                            statusPr=$(gh pr list --head "$prefix${lastBranch[0]}" --state open --json title | jq ". | length")
                            if [[ $statusPr -lt 1 ]]; then
                                update_package "$cljdir" "$name" "$1" "$escapedName" "$latestVersion" "$time" "$version" "$changesUrl" "$securityUpdatesPrBody"
                            else
                                git checkout "$INPUT_MAIN_BRANCH"
                            fi
                        else
                            update_package "$cljdir" "$name" "$1" "$escapedName" "$latestVersion" "$time" "$version" "$changesUrl" "$securityUpdatesPrBody"
                        fi    
                    fi
                else
                    git fetch
                    mapfile -t branches < <(git branch -r | grep "$prefix")
                    if [[ ${branches[*]} ]]; then
                        prTime=()
                        for k in "${branches[@]}"
                        do
                            prTime+=("${k//origin\/$prefix/}")
                        done
                        IFS=" " read -r -a lastBranch <<< "$(echo "${prTime[*]}" | xargs -n1 | sort -nr | xargs)"
                        statusPr=$(gh pr list --head "$prefix${lastBranch[0]}" --state open --json title | jq ". | length")
                        if [[ $statusPr -lt 1 ]]; then
                            update_package "$cljdir" "$name" "$1" "$escapedName" "$latestVersion" "$time" "$version" "$changesUrl" "$securityUpdatesPrBody"
                        else
                            git checkout "$INPUT_MAIN_BRANCH"
                        fi
                    else
                        update_package "$cljdir" "$name" "$1" "$escapedName" "$latestVersion" "$time" "$version" "$changesUrl" "$securityUpdatesPrBody"
                    fi
                fi
            fi
        fi
    done
    if [[ "$summaryOutput" -eq 1 ]]; then
        echo "</details>" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
    fi
done